{"name": "test_run_false", "status": "skipped", "statusDetails": {"message": "XFAIL [NOTRUN] \n\n_pytest.outcomes.XFailed: [NOTRUN]", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_and_report.<locals>.<lambda> at 0x000002A239E291C0>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        instant = timing.Instant()\n        try:\n>           result: TResult | None = func()\n                                     ^^^^^^\n\n.venv\\Lib\\site-packages\\_pytest\\runner.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\_pytest\\runner.py:246: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\_pytest\\logging.py:843: in pytest_runtest_setup\n    yield\n.venv\\Lib\\site-packages\\pluggy\\_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\pluggy\\_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n.venv\\Lib\\site-packages\\_pytest\\capture.py:895: in pytest_runtest_setup\n    return (yield)\n            ^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_run_false>\n\n    @hookimpl(tryfirst=True)\n    def pytest_runtest_setup(item: Item) -> None:\n        skipped = evaluate_skip_marks(item)\n        if skipped:\n            raise skip.Exception(skipped.reason, _use_item_location=True)\n    \n        item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n>           xfail(\"[NOTRUN] \" + xfailed.reason)\nE           _pytest.outcomes.XFailed: [NOTRUN]\n\n.venv\\Lib\\site-packages\\_pytest\\skipping.py:250: XFailed"}, "start": 1754971611455, "stop": 1754971611455, "uuid": "c3cec16a-d92d-4689-b70b-8a582c0aaa5d", "historyId": "77485dedf96835ead000377b57ced517", "testCaseId": "77485dedf96835ead000377b57ced517", "fullName": "DemoThirdTest.test_xfail.TestMath#test_run_false", "labels": [{"name": "parentSuite", "value": "DemoThirdTest"}, {"name": "suite", "value": "test_xfail"}, {"name": "subSuite", "value": "TestMath"}, {"name": "host", "value": "DESKTOP-0LJMU54"}, {"name": "thread", "value": "19604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "DemoThirdTest.test_xfail"}], "titlePath": ["DemoThirdTest", "test_xfail.py", "TestMath"]}